// Напишите регулярку, которая найдет строки 'aba', 'abba', 'abbba' по шаблону: буква 'a', буква 'b' любое количество раз, буква 'a'.
// let str = 'aa aba abba abbba abca abea';
// console.log(str.replace(/ab+a/g, "!"));

// Напишите регулярку, которая найдет строки 'aa', 'aba' по шаблону: буква 'a', буква 'b' один раз или ниодного, буква 'a'.
// let str = 'aa aba abba abbba abca abea';
// console.log(str.replace(/ab?a/g, "!"));

// Напишите регулярку, которая найдет строки 'aa', 'aba', 'abba', 'abbba', не захватив 'abca' и 'abea'.
// let str = 'aa aba abba abbba abca abea';
// console.log(str.replace(/ab*a/g, "!"));

// Напишите регулярку, которая найдет строки по шаблону: строка 'ab' повторяется 1 или более раз.
// let str = 'ab abab abab abababab abea';
// console.log(str.replace(/(ab)+/g, "!"))

// Если экранировать обычный символ - ничего страшного не случится - он все равно будет обозначать сам себя.Исключение - цифры, их нельзя экранировать.
// Часто возникает сомнение, является ли данный символ специальным.Некоторые доходят до того, что экранируют все подозрительные символы подряд.Однако, это плохая практика(захламляет регулярку обратными слешами).
// Являются спецсимволами: $ ^ . * + ?\ / {} [] () |
// Не являются спецсимволами: @ : , ' " ; - _ = < > % # ~ `& !

// Напишите регулярку, которая найдет строку 'a.a', не захватив остальные.
// let str = 'a.a aba aea';
// console.log(str.replace(/a\.a/, "!"));

// Напишите регулярку, которая найдет строку '2+3', не захватив остальные
// let str = '2+3 223 2223';
// console.log(str.replace(/2\+3/g, "!"));

// Напишите регулярку, которая найдет строки '2+3', '2++3', '2+++3', не захватив остальные(+ может быть любое количество).
// let str = '23 2+3 2++3 2+++3 345 567';
// console.log(str.replace(/2\++3/g, "!"));


// Напишите регулярку, которая найдет строки '23', '2+3', '2++3', '2+++3', не захватив остальные.
// let str = '23 2+3 2++3 2+++3 445 677';
// console.log(str.replace(/2\+*3/g, "!"));

// Напишите регулярку, которая найдет строки '*q+', '*qq+', '*qqq+', не захватив остальные.
// let str = '*+ *q+ *qq+ *qqq+ *qqq qqq+';
// console.log(str.replace(/\*q+\+/g, "!"));

// Напишите регулярку, которая найдет строки в квадратных скобках и заменит их на '!'.
// let str = '[abc] {abc} abc (abc) [abc]';
// console.log(str.replace(/\[\w*\]/g, "!"));

// Напишите регулярку, которая найдет строки 'abba', 'abbba', 'abbbba' и только их.
// let str = 'aa aba abba abbba abbbba abbbbba';
// console.log(str.replace(/ab{2,4}a/g, "!"));

// Напишите регулярку, которая найдет строки вида 'aba', в которых 'b' встречается менее 3 - х раз(включительно).
// let str = 'aa aba abba abbba abbbba abbbbba';
// console.log(str.replace(/ab{0,3}a/g, "!"));

// Напишите регулярку, которая найдет строки вида 'aba', в которых 'b' встречается более 4 - х раз(включительно).
// let str = 'aa aba abba abbba abbbba abbbbba';
// console.log(str.replace(/ab{4,}a/g, "!"));

// Напишите регулярку, которая найдет все строки по краям которых стоят буквы 'a', и заменит каждую из них на '!'.Между буквами 'a' может быть любой символ(кроме 'a').
// let str = 'aba accca azzza wwwwa';
// console.log(str.replace(/a.+?a/g, "!"));

// Напишите регулярку, которая найдет строки, в которых по краям стоят буквы 'a', а между ними одна цифра;
// let str = 'a1a a2a a3a a4a a5a aba aca';
// console.log(str.replace(/a\da/g, "!"));

// Напишите регулярку, которая найдет строки, в которых по краям стоят буквы 'a', а между ними любое количество цифр.
// let str = 'a1a a22a a333a a4444a a55555a aba aca';
// console.log(str.replace(/a\d{1,}a/g, "!"));

// Напишите регулярку, которая найдет строки, в которых по краям стоят буквы 'a', а между ними любое количество цифр(в том числе и ноль цифр, то есть строка 'aa').
// let str = 'aa a1a a22a a333a a4444a a55555a aba aca'
// console.log(str.replace(/a\d{0,}a/g, "!"));

// Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a' и 'b', а между ними - не число и не пробел.
// let str = 'avb a1b a2b a3b a4b a5b abb acb';
// console.log(str.replace(/a\Db/g, "!"))

// Напишите регулярку, которая найдет строки следующего вида: по краям стоят буквы 'a' и 'b', а между ними - не буква, не цифра и не пробел.
// let str = 'ave a#b a2b a$b a b a5b a-b acb';
// console.log(str.replace(/a\Wb/g, "!"))

// Напишите регулярку, которая заменит все пробелы на '!'.
// let str = 'ave a#a a2a a$a a4a a5a a-a aca';
// console.log(str.replace(/\s/g, "!"))

// Напишите регулярку, которая найдет по следующему шаблону: по краям стоят буквы 'a', а между ними - цифра от 3 - х до 6 - ти.
// let str = 'a1a a3a a7a a9a aba';
// console.log(str.replace(/a[3-6]a/g, "!"))

// Напишите регулярку, которая найдет по следующему шаблону: по краям стоят буквы 'a', а между ними - буква от a до g.
// let str = 'aba aea afa aha aga';
// console.log(str.replace(/a[a-g]a/g, "!"))

// Напишите регулярку, которая найдет по следующему шаблону: по краям стоят буквы 'a', а между ними - буква от a до f и от j до z.
// let str = 'aba aea afa aha aga';
// console.log(str.replace(/a[a-fj-z]a/g, "!"))

// Напишите регулярку, которая найдет по следующему шаблону: по краям стоят буквы 'a', а между ними - буква от a до f и от A до D
// let str = 'aAa aea aEa aJa a3a';
// console.log(str.replace(/a[a-fA-D]a/g, "!"))

// Напишите регулярку, которая найдет по следующему шаблону: по краям стоят буквы 'a', а между ними - маленькие латинские буквы, не затронув остальных.
// let str = 'aAXa aeffa aGha aza ax23a a3sSa';
// console.log(str.replace(/a[a-z]+a/g, "!"))

// Напишите регулярку, которая найдет по следующему шаблону: по краям стоят буквы 'a', а между ними - маленькие и большие латинские буквы, не затронув остальных.
// let str = 'aAXa aeffa aGha aza ax23a a3sSa';
// console.log(str.replace(/a[a-zA-Z]+a/g, "!"))

// Напишите регулярку, которая найдет по следующему шаблону: по краям стоят буквы 'a', а между ними - маленькие латинские буквы и цифры, не затронув остальных.
// let str = 'aAXa aeffa aGha aza ax23a a3sSa';
// console.log(str.replace(/a[a-zA-Z1-9]+a/g, "!"))

// Кириллические символы не входят в группу \w.Для их получения нужно использовать группу в квадратных скобках, вот так: [а - я].
// Но даже с этой группой есть проблема - сюда не войдет буква 'ё'.Для ее включения нужно сделать вот так: [а - яё].

// Напишите регулярку, которая найдет строки по шаблону: по краям стоят буквы 'w', а между ними - буква кириллицы.
// let str = 'wйw wяw wёw wqw';
// console.log(str.replace(/w[а-яё]w/g, "!"))

// Напишите регулярку, которая найдет все слова по шаблону: любая кириллическая буква любое количество раз.
// let str = 'ааа ббб ёёё ззз ййй ААА БББ ЁЁЁ ЗЗЗ ЙЙЙ';
// console.log(str.replace(/[А-ЯЁа-яё]+/g, "!"))

// Напишите регулярку, которая найдет строки 'a.a', 'a+a', 'a*a', не затронув остальных.
// let str = 'aba aea aca aza axa a.a a+a a*a';
// console.log(str.replace(/a[.+*]a/g, "!"))

// Напишите регулярку, которая найдет строки по шаблону: буква 'x', затем НЕ точка, НЕ собака, и НЕ доллар, а потом буква 'z'
// let str = 'xaz x.z x3z x@z x$z xrz';
// console.log(str.replace(/a[^.+*]a/g, "!"))

// Группы символов \d, \D, \w, \W, \s, \S внутри[] будут обозначать именно группы, то есть по - прежнему будут командами.

// Вы уже знаете, что спецсимволы внутри[] становятся обычными символами.Есть, однако, исключения: если вам нужны квадратные скобки как символы внутри[] - то их нужно экранировать обратным слешем.
// Для примера в следующем коде шаблон поиска выглядит так: между иксами стоит квадратная скобка:

// Напишите регулярку, которая найдет все слова по шаблону: буква 'x', затем квадратные скобки любое количество раз, затем буква 'z'.
// let str = 'x[]]z x[[]]z x()z';
// console.log(str.replace(/x[\[\]]+z/g, "!"))

// Напишите регулярку, которая найдет все слова по шаблону: буква 'x', затем любое количество любых скобок, затем буква 'z'.
// let str = 'x[]z x{}z x.z x()z x([])z';
// console.log(str.replace(/x[\[\]\{\}\(\)]+z/g, "!"))

// Как вы знаете, шляпка внутри[] делает отрицание, будучи написанной в начале скобок.
// Значит, она является спецсимволом внутри этих скобок.Чтобы получить шляпку как символ, нужно или заэкранировать ее, или убрать с первого места.

// Напишите регулярку, которая найдет строки по шаблону: не шляпка и не пробел, а затем две латинских буквы.
// let str = '^xx axx ^zz bkk';
// console.log(str.replace(/[^\^\s]\w\w/g, "!"))

// Дефис - тоже спецсимвол внутри[](а вот снаружи - нет).Если вам нужен сам дефис как символ - то поставьте его там, где он не будет воспринят как разделитель группы.
// Почему это важно: вы можете сделать группу символов, сами не заметив этого.К примеру, вот так - '[:-@]' - вы думаете, что выбираете двоеточие, дефис и собаку, а на самом деле получается группа символов между: и @.В эту группу входят следующие символы: ? < = > : ;
// Откуда они взялись ? Из таблицы ASCII - двоеточие имеет номер меньше, чем собака - и получается группа.То есть все группы получаются по таблице ASCII(при желании этим можно пользоваться).
// Как с этим бороться: поставьте символ дефиса там, где он точно не будет воспринят как символ группы, например, в начале или в конце(то есть после[или перед ]).
// Можно также заэкранировать дефис - тогда он будет обозначать сам себя независимо от позиции.Например, вместо[: -@]написать[: \-@]- и группы уже не будет, а будут три символа - двоеточие, дефис и собака @.

// Найдите все строки по следующему шаблону: буква 'x', большая или маленькая буква или дефис, буква 'z'.
// let str = 'xaz xBz xcz x-z x@z';
// console.log(str.replace(/x[\w-]z/g, "!"))

// Найдите все строки по следующему шаблону: буква 'x', затем или доллар, или дефис или плюс, потом буква 'z'.
// let str = 'xaz x$z x-z xcz x+z x%z x*z';
// console.log(str.replace(/x[\W+-]z/g, "!"))
